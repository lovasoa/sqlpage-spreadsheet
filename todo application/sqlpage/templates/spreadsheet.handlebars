<div class="modal fade" id="errorModal_{{@component_index}}" tabindex="-1" aria-labelledby="errorModalLabel_{{@component_index}}" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Cell Update</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body"></div>
    </div>
  </div>
</div>

<script nonce="{{@csp_nonce}}" src="https://cdn.jsdelivr.net/npm/@univerjs/umd@0.2.6/lib/univer.full.umd.js"></script>
<script nonce="{{@csp_nonce}}" src="https://cdn.jsdelivr.net/npm/@univerjs/umd@0.2.6/lib/locale/en-US.js"></script>
<style>
  @import url(https://cdn.jsdelivr.net/npm/@univerjs/umd@0.2.6/lib/univer.min.css);
  @media (min-width: 768px) {
    .sqlpage_spreadsheet {
      margin: 0 -2rem;
      width: calc(100% + 4rem);
    }
  }
</style>

<div id="_sqlpage_spreadsheet_univer_{{@component_index}}" class="sqlpage_spreadsheet" style="height: 80vh">
  <div class="d-flex justify-content-center h-100 align-items-center">
    <div class="spinner-border" role="status" style="width: 3rem; height: 3rem;">
      <span class="visually-hidden">Loading spreadsheet...</span>
    </div>
  </div>
</div>
 
<script nonce="{{@csp_nonce}}">
  const resp_modal = document.getElementById('errorModal_{{@component_index}}');
  {{#if update_link}}
    async function onUpdate(x, y, value, custom) {
      const relative_url = {{{stringify update_link}}};
      const url = new URL(relative_url, window.location.href);
      url.searchParams.append('_sqlpage_embed', 1);
      const formData = new URLSearchParams();
      formData.append("x", x);
      formData.append("y", y);
      if (value != null) formData.append("value", value);
      if (custom && custom.id !== null) formData.append("id", custom.id);
      const r = await fetch(url, {
        method: "POST",
        body: formData,
      });
      let resp_html = await r.text();
      if (r.status !== 200 && !resp_html) resp_html = resp.statusText;
      if (resp_html) {
        resp_modal.querySelector('.modal-body').innerHTML = resp_html;
        new bootstrap.Modal(resp_modal).show();
      }
    }
  {{else}}
    function onUpdate(x, y, value) {}
  {{/if}}

  var {
    UniverCore,
    UniverDesign,
    UniverEngineRender,
    UniverEngineFormula,
    UniverDocs,
    UniverDocsUi,
    UniverUi,
    UniverSheets,
    UniverSheetsUi,
    UniverSheetsNumfmt,
    UniverSheetsFormula,
    UniverFacade,
  } = window

  var univer = new UniverCore.Univer({
    theme: UniverDesign.defaultTheme,
    locale: UniverCore.LocaleType.EN_US,
    locales: {
      [UniverCore.LocaleType.EN_US]: UniverUMD['en-US'],
    },
  });

  univer.registerPlugin(UniverEngineRender.UniverRenderEnginePlugin);
  univer.registerPlugin(UniverEngineFormula.UniverFormulaEnginePlugin);

  univer.registerPlugin(UniverUi.UniverUIPlugin, {
    container: "_sqlpage_spreadsheet_univer_{{@component_index}}",
  });

  univer.registerPlugin(UniverDocs.UniverDocsPlugin, {
    hasScroll: false,
  });
  univer.registerPlugin(UniverDocsUi.UniverDocsUIPlugin);

  univer.registerPlugin(UniverSheets.UniverSheetsPlugin);
  univer.registerPlugin(UniverSheetsUi.UniverSheetsUIPlugin);
  univer.registerPlugin(UniverSheetsNumfmt.UniverSheetsNumfmtPlugin);
  univer.registerPlugin(UniverSheetsFormula.UniverSheetsFormulaPlugin);

  const univerAPI = UniverFacade.FUniver.newAPI(univer);
</script>
<script nonce="{{@csp_nonce}}" data-cells="
[
{{#each_row}}
  {{~#unless (eq @row_index 0)~}}
    ,
  {{~/unless~}}
  [
    {{~stringify x~}}, {{~stringify y~}}, {{~stringify value~}}
    {{~#if bold~}} ,1 {{~/if~}}
    {{~#if italic~}} ,2 {{~/if~}}
    {{~#if color~}} ,3,{{stringify color}} {{~/if~}}
    {{~#if center~}} ,4 {{~/if~}}
    {{~#if right~}} ,5 {{~/if~}}
    {{~#if number_format~}} ,6,{{stringify number_format}} {{~/if~}}
    {{~#if id~}} ,7,{{stringify id}} {{~/if~}}
  ]
{{/each_row}}
]
">

  const tblrColors = Object.fromEntries(['azure', 'red', 'lime', 'purple', 'yellow', 'blue', 'gray-600', 'orange', 'black', 'pink', 'teal', 'indigo', 'cyan', 'green']
    .map(c => [c, getComputedStyle(document.documentElement).getPropertyValue('--tblr-' + c)]));

  const data_txt = document.currentScript.dataset.cells;
  const data = JSON.parse(data_txt);

  function cellFromProps(props) {
    const s = {};
    for(let i=0; i<props.length; i++) {
      const n = props[i];
      if (n===1) s.bl = 1;
      else if (n===2) s.it = 1;
      else if (n===3) {
        const color = props[++i];
        s.bg = {rgb: tblrColors[color] }
      } else if (n===4) s.ht = 2;
      else if (n===5) s.ht = 3;
      else if (n===6) {
        const pattern = props[++i];
        s.n = { pattern };
      } else if (n===7) s.id = props[++i];
    }
    return s;
  }

  function generateWorkSheet(dataArray) {
    const cellData = {};
    let rowCount = 1000;
    let columnCount = 26;

    dataArray.forEach(([colIdx, rowIdx, value, ...props]) => {
      const cell = { v: value };
      if (props.length) cell.s = cellFromProps(props);
      if (cell.s && cell.s.id) cell.custom = {id: cell.s.id};
      if (typeof value === "number") cell.t = UniverCore.CellValueType.NUMBER;
      const row = cellData[rowIdx];
      if (row) row[colIdx] = cell; 
      else cellData[rowIdx] = {[colIdx]: cell};
      rowCount = Math.max(rowCount, rowIdx);
      columnCount = Math.max(columnCount, colIdx);
    });

    return  {
      "id": "sqlpage",
      "name": "SQLPage Data",
      rowCount,
      columnCount,
      cellData,
    };
  }

  const workbook = {
    "sheetOrder": ["sqlpage"],
    "name": "sqlpage",
    "appVersion": "0.2.6",
    "locale": "enUS",
    "sheets": {
      "sqlpage":generateWorkSheet(data)
    },
  }
  const unit = univer.createUnit(UniverCore.UniverInstanceType.UNIVER_SHEET, workbook);

  const activeSheet = univerAPI.getActiveWorkbook().getActiveSheet();

  const freeze_x = {{stringify (default freeze_x 0)}};
  const freeze_y = {{stringify (default freeze_y 0)}};

  if (freeze_x || freeze_y) {
    univerAPI.executeCommand('sheet.mutation.set-frozen', {
      unitId: unit.getUnitId(),
      subUnitId: activeSheet.getSheetId(),
      startRow: freeze_y,
      startColumn: freeze_x,
      xSplit: freeze_x,
      ySplit: freeze_y
    });
  }

  univerAPI.onCommandExecuted(({id, params}) => {
    if (id === "sheet.mutation.set-range-values") {
      const { cellValue } = params;
      for (const [row, cols] of Object.entries(cellValue)) {
        for (const [col, {v, custom}] of Object.entries(cols)) {
          if (v === undefined) continue;
          onUpdate(parseInt(col), parseInt(row), v, custom);
        }
      }
    }
  });
</script>
